---
  - name: 6.1.2 Ensure permissions on /etc/passwd are configured (Scored)
    shell: stat /etc/passwd
    register: out
    failed_when: >
     '0644' not in out.stdout
    changed_when: false
    ignore_errors: true

  - shell: |
       chown root:root /etc/passwd;chmod 644 /etc/passwd
    ignore_errors: true
    when: out is failed and remediation == 'YES'

  - name: 6.1.3 Ensure permissions on /etc/shadow are configured (Scored)
    shell: stat /etc/shadow
    register: out
    failed_when: >
     '0640' not in out.stdout
    changed_when: false
    ignore_errors: true

  - shell: |
       chown root:root /etc/shadow;chmod 640 /etc/shadow
    ignore_errors: true
    when: out is failed and remediation == 'YES' 

  - name: 6.1.4 Ensure permissions on /etc/group are configured (Scored)
    shell: stat /etc/group
    register: out
    failed_when: >
     '0644' not in out.stdout
    changed_when: false
    ignore_errors: true

  - shell: |
       chown root:root /etc/group;chmod 644 /etc/group
    ignore_errors: true
    when: out is failed and remediation == 'YES' 

  - name: 6.1.5 Ensure permissions on /etc/gshadow are configured (Scored)
    shell: stat /etc/gshadow
    register: out
    failed_when: >
     '0640' not in out.stdout
    changed_when: false
    ignore_errors: true

  - shell: |
       chown root:root /etc/gshadow;chmod 640 /etc/gshadow
    ignore_errors: true
    when: out is failed and remediation == 'YES' 

  - name: 6.1.6 Ensure permissions on /etc/passwd- are configured (Scored)
    shell: stat /etc/passwd-
    register: out
    failed_when: >
     '0600' not in out.stdout
    changed_when: false
    ignore_errors: true

  - shell: |
       chown root:root /etc/passwd-;chmod 600 /etc/passwd-
    ignore_errors: true
    when: out is failed and remediation == 'YES' 

  - name: 6.1.7 Ensure permissions on /etc/shadow- are configured (Scored)
    shell: stat /etc/shadow-
    register: out
    failed_when: >
     '0640' not in out.stdout
    changed_when: false
    ignore_errors: true

  - shell: |
        chown root:root /etc/shadow-;chmod 640 /etc/shadow-
    ignore_errors: true
    when: out is failed and remediation == 'YES' 

  - name: 6.1.8 Ensure permissions on /etc/group- are configured (Scored)
    shell: stat /etc/group-
    register: out
    failed_when: >
     '0644' not in out.stdout
    changed_when: false
    ignore_errors: true

  - shell: |
        chown root:root /etc/group-;chmod 644 /etc/group-
    ignore_errors: true
    when: out is failed and remediation == 'YES'   

  - name: 6.1.9 Ensure permissions on /etc/gshadow- are configured (Scored)
    shell: stat /etc/gshadow-
    register: out
    failed_when: >
     '0640' not in out.stdout
    changed_when: false
    ignore_errors: true

  - shell: |
        chown root:root /etc/gshadow-;chmod 640 /etc/gshadow-
    ignore_errors: true
    when: out is failed and remediation == 'YES'

  - name: 6.1.10 Ensure no world writable files exist (Scored)
    shell: df -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type f -perm -0002
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  #  - shell: |
  #       chown root:root /etc/gshadow-
  #   ignore_errors: true
  #   when: out is failed and remediation == 'YES'

  - name: 6.1.11 Ensure no unowned files or directories exist (Scored)
    shell: df -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser 
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.1.12 Ensure no ungrouped files or directories exist (Scored)
    shell:  df -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -nogroup 
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.1 Ensure password fields are not empty (Scored)
    shell: |
       awk -F: '($2 == "" ) { print $1 " does not have a password "}' /etc/shadow
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.2 Ensure no legacy "+" entries exist in /etc/passwd (Scored)
    shell: | 
      grep '^\+:' /etc/passwd
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.3 Ensure no legacy "+" entries exist in /etc/shadow (Scored)
    shell: | 
      grep '^\+:' /etc/shadow
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.4 Ensure no legacy "+" entries exist in /etc/group (Scored)
    shell: | 
      grep '^\+:' /etc/group
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.5 Ensure root is the only UID 0 account (Scored)
    shell: | 
      awk -F: '($3 == 0) { print $1 }' /etc/passwd
    register: out
    failed_when: >
     out.stdout != "root"
    changed_when: false
    ignore_errors: true

  - name: 6.2.6 Ensure root PATH Integrity (Scored)
    shell: | 
      if [ "`echo $PATH | grep :: `" != "" ]; then
        echo "Empty Directory in PATH (::)"
      fi

      if [ "`echo $PATH | grep :$`" != "" ]; then
      echo "Trailing : in PATH"
      fi

      p=`echo $PATH | /bin/sed -e 's/::/:/' -e 's/:$//' -e 's/:/ /g'`
      set -- $p
      while [ "$1" != "" ]; do
        if [ "$1" = "." ]; then
          echo "PATH contains ."
          shift
          continue
        fi
        if [ -d $1 ]; then
          dirperm=`/bin/ls -ldH $1 | /bin/cut -f1 -d" "`
          if [ `echo $dirperm | /bin/cut -c6 ` != "-" ]; then
            echo "Group Write permission set on directory $1"
          fi
          if [ `echo $dirperm | /bin/cut -c9 ` != "-" ]; then
            echo "Other Write permission set on directory $1"
          fi
          dirown=`ls -ldH $1 | awk '{print $3}'`
          if [ "$dirown" != "root" ] ; then
            echo $1 is not owned by root
          fi
        else
          echo $1 is not a directory 
        fi
        shift
      done
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.7 Ensure all users' home directories exist (Scored)
    shell: | 
      grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read -r user dir; do
      if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      fi
      done
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.8 Ensure users' home directories permissions are 750 or more restrictive (Scored)
    shell: | 
      grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
      echo "The home directory ($dir) of user $user does not exist."
      else
      dirperm=$(ls -ld $dir | cut -f1 -d" ")
      if [ $(echo $dirperm | cut -c6) != "-" ]; then
      echo "Group Write permission set on the home directory ($dir) of user $user"
      fi
      if [ $(echo $dirperm | cut -c8) != "-" ]; then
      echo "Other Read permission set on the home directory ($dir) of user $user"
      fi
      if [ $(echo $dirperm | cut -c9) != "-" ]; then
      echo "Other Write permission set on the home directory ($dir) of user $user"
      fi
      if [ $(echo $dirperm | cut -c10) != "-" ]; then
      echo "Other Execute permission set on the home directory ($dir) of user $user"
      fi
      fi
      done
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.9 Ensure users own their home directories (Scored)
    shell: | 
      grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
      echo "The home directory ($dir) of user $user does not exist."
      else
      owner=$(stat -L -c "%U" "$dir")
      if [ "$owner" != "$user" ]; then
      echo "The home directory ($dir) of user $user is owned by $owner."
      fi
      fi
      done
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.10 Ensure users' dot files are not group or world writable (Scored)
    shell: | 
      grep -E -v '^(halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
      echo "The home directory ($dir) of user $user does not exist."
      else
      for file in $dir/.[A-Za-z0-9]*; do
      if [ ! -h "$file" -a -f "$file" ]; then
      fileperm=$(ls -ld $file | cut -f1 -d" ")
      if [ $(echo $fileperm | cut -c6) != "-" ]; then
      echo "Group Write permission set on file $file"
      fi
      if [ $(echo $fileperm | cut -c9) != "-" ]; then
      echo "Other Write permission set on file $file"
      fi
      fi
      done
      fi
      done
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.11 Ensure no users have .forward files (Scored)
    shell: | 
      grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
      echo "The home directory ($dir) of user $user does not exist."
      else
      if [ ! -h "$dir/.forward" -a -f "$dir/.forward" ]; then
      echo ".forward file $dir/.forward exists"
      fi
      fi
      done
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.12 Ensure no users have .netrc files (Scored)
    shell: | 
        grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
        if [ ! -d "$dir" ]; then
        echo "The home directory ($dir) of user $user does not exist."
        else
        if [ ! -h "$dir/.netrc" -a -f "$dir/.netrc" ]; then
        echo ".netrc file $dir/.netrc exists"
        fi
        fi
        done
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.13 Ensure users' .netrc Files are not group or world accessible  (Scored)
    shell: | 
      grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
      echo "The home directory ($dir) of user $user does not exist."
      else
      for file in $dir/.netrc; do
      if [ ! -h "$file" -a -f "$file" ]; then
      fileperm=$(ls -ld $file | cut -f1 -d" ")
      if [ $(echo $fileperm | cut -c5) != "-" ]; then
      echo "Group Read set on $file"
      fi
      if [ $(echo $fileperm | cut -c6) != "-" ]; then
      echo "Group Write set on $file"
      fi
      if [ $(echo $fileperm | cut -c7) != "-" ]; then
      echo "Group Execute set on $file"
      fi
      if [ $(echo $fileperm | cut -c8) != "-" ]; then
      echo "Other Read set on $file"
      fi
      if [ $(echo $fileperm | cut -c9) != "-" ]; then
      echo "Other Write set on $file"
      fi
      if [ $(echo $fileperm | cut -c10) != "-" ]; then
      echo "Other Execute set on $file"
      fi
      fi
      done
      fi
      done
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.14 Ensure no users have .rhosts files (Scored)
    shell: | 
      grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '($7 != "'"$(which nologin)"'" && $7 != "/bin/false") { print $1 " " $6 }' | while read user dir; do
      if [ ! -d "$dir" ]; then
      echo "The home directory ($dir) of user $user does not exist."
      else
      for file in $dir/.rhosts; do
      if [ ! -h "$file" -a -f "$file" ]; then
      echo ".rhosts file in $dir"
      fi
      done
      fi
      done
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.15 Ensure all groups in /etc/passwd exist in /etc/group (Scored)
    shell: | 
      for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
      grep -q -P "^.*?:[^:]*:$i:" /etc/group
      if [ $? -ne 0 ]; then
      echo "Group $i is referenced by /etc/passwd but does not exist in /etc/group"
      fi
      done
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.16 Ensure no duplicate UIDs exist (Scored)
    shell: | 
      cut -f3 -d":" /etc/passwd | sort -n | uniq -c | while read x ; do
      [ -z "$x" ] && break
      set - $x
      if [ $1 -gt 1 ]; then
      users=$(awk -F: '($3 == n) { print $1 }' n=$2 /etc/passwd | xargs)
      echo "Duplicate UID ($2): $users"
      fi
      done
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.17 Ensure no duplicate GIDs exist (Scored)
    shell: | 
      cut -f3 -d":" /etc/group | sort -n | uniq -c | while read x ; do
      [ -z "$x" ] && break
      set - $x
      if [ $1 -gt 1 ]; then
      groups=$(awk -F: '($3 == n) { print $1 }' n=$2 /etc/group | xargs)
      echo "Duplicate GID ($2): $groups"
      fi
      done
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.18 Ensure no duplicate user names exist (Scored)
    shell: | 
      cut -f1 -d":" /etc/passwd | sort -n | uniq -c | while read x ; do
      [ -z "$x" ] && break
      set - $x
      if [ $1 -gt 1 ]; then
      uids=$(awk -F: '($1 == n) { print $3 }' n=$2 /etc/passwd | xargs)
      echo "Duplicate User Name ($2): $uids"
      fi
      done
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.19 Ensure no duplicate group names exist (Scored)
    shell: | 
      cut -f1 -d":" /etc/group | sort -n | uniq -c | while read x ; do
      [ -z "$x" ] && break
      set - $x
      if [ $1 -gt 1 ]; then
      gids=$(gawk -F: '($1 == n) { print $3 }' n=$2 /etc/group | xargs)
      echo "Duplicate Group Name ($2): $gids"
      fi
      done
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true

  - name: 6.2.20 Ensure shadow group is empty (Scored)
    shell: | 
      grep ^shadow:[^:]*:[^:]*:[^:]+ /etc/group
    register: out
    failed_when: >
     out.stdout | length !=0
    changed_when: false
    ignore_errors: true